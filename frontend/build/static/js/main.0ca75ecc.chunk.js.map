{"version":3,"sources":["index.js"],"names":["ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Nav","rows","i","this","props","data","length","buttonClass","active","push","className","onClick","uuidv4","refreshData","renderCharacters","Fragment","id","React","Component","Graphs","options","responsive","maintainAspectRatio","characterColours","items","reduce","total","item","parseFloat","a","b","n","valueFunction","graphList","graphData","sort","element","label","labels","datasets","backgroundColor","borderColor","map","x","replace","borderWidth","wealth","getGraphData","wealthGraph","graph","wealthWithoutConsumables","wealthWithoutConsumablesGraph","type","Table","tableHeader","string","charAt","toUpperCase","slice","header","sorting","isNaN","ascending","capitalizeFirstLetter","flip","localeCompare","renderHeaderRow","compareFct","itemIndex","renderRow","renderRows","WealthViewer","state","fetch","then","res","json","setState","getData","button","text","target","innerText","toLowerCase","Object","keys","sortTable","ReactDOM","createRoot","document","getElementById","render"],"mappings":"0NAeAA,IAAQC,SACJC,IACAC,IACAC,IACAC,IACAC,IACAC,K,IAIEC,E,sKACF,WAEI,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAAIC,KAAKC,MAAMC,KAAKC,OAAQJ,IAAK,CAC7C,IAAIK,EAAeJ,KAAKC,MAAMC,KAAKH,GAAhB,OAA+BC,KAAKC,MAAMI,OAAU,SAAW,GAClFP,EAAKQ,KAAK,6BACN,wBAAQC,UAAWH,EAAaI,QAASR,KAAKC,MAAMO,QAApD,SAA8DR,KAAKC,MAAMC,KAAKH,GAAhB,QAD/CU,eAGtB,CAED,OADAX,EAAKQ,KAAK,6BAAmB,wBAAQE,QAASR,KAAKC,MAAMS,YAA5B,2BAAVD,gBACZX,CACV,G,oBAED,WACI,IAAMA,EAAOE,KAAKW,mBAClB,OACI,cAAC,IAAMC,SAAP,UACI,8BACI,sBAAKC,GAAG,aAAR,UACI,4CACC,6CACD,6BACKf,UAOxB,K,GA7BagB,IAAMC,WAgClBC,E,4MACFC,QAAU,CACNC,YAAY,EACZC,qBAAqB,G,EAGzBC,iBAAmB,CAAC,0BAA2B,0BAC3C,0BAA2B,0BAC3B,2BAA4B,4B,4CAEhC,SAAOC,GACH,OAAOA,EAAMC,QAAO,SAACC,EAAOC,GAAR,OAAiBD,EAAQE,WAAWD,EAAI,MAAxC,GAAoD,EAC3E,G,sCAED,SAAyBH,GAErB,OAAOA,EAAMC,QAAO,SAACI,EAAGC,GAAJ,OAAUD,IADPE,EAC4BD,GADtB,WAAiB,EAAIF,WAAWG,EAAC,QAAvC,IAAAA,CACH,GAAmC,EAC1D,G,0BAED,SAAa1B,EAAM2B,GAGf,IAFA,IAAMC,EAAY,GACZC,EAAY,CAAC,EACVhC,EAAI,EAAGA,EAAIG,EAAKC,OAAQJ,IAC7B+B,EAAUxB,KAAK,CAACJ,EAAKH,GAAL,KAAiB8B,EAAc3B,EAAKH,GAAL,OAAmBC,KAAKoB,iBAAiBrB,KAE5F+B,EAAUE,MAAK,SAACN,EAAGC,GAAJ,OAAUA,EAAE,GAAKD,EAAE,EAAnB,IACfK,EAAS,OAAa,GACtBA,EAAS,KAAW,GACpBA,EAAS,gBAAsB,GAC/B,cAAsBD,EAAtB,eAAiC,CAA5B,IAAMG,EAAO,KACdF,EAAS,OAAWzB,KAAK2B,EAAQ,IACjCF,EAAS,KAASzB,KAAK2B,EAAQ,IAC/BF,EAAS,gBAAoBzB,KAAK2B,EAAQ,GAC7C,CACD,OAAOF,CACV,G,mBAED,SAAMA,EAAWG,GACb,MAAO,CACHC,OAAQJ,EAAS,OACjBK,SAAU,CAAC,CACPF,MAAOA,EACPhC,KAAM6B,EAAS,KACfM,gBAAiBN,EAAS,gBAC1BO,YAAaP,EAAS,gBAAoBQ,KAAI,SAACC,GAAD,OAAOA,EAAEC,QAAQ,MAAO,IAAxB,IAC9CC,YAAa,IAGxB,G,oBAED,WACI,IAAMC,EAAS3C,KAAK4C,aAAa5C,KAAKC,MAAMC,KAAMF,KAAK2C,QACjDE,EAAc7C,KAAK8C,MAAMH,EAAQ,gBACjCI,EAA2B/C,KAAK4C,aAAa5C,KAAKC,MAAMC,KAAMF,KAAK+C,0BACnEC,EAAgChD,KAAK8C,MAAMC,EAA0B,oCAC3E,OAAO,eAAC,IAAMnC,SAAP,WACH,cAAC,IAAD,CAAKK,QAASjB,KAAKiB,QAASf,KAAM2C,EAAaI,KAAK,QACpD,cAAC,IAAD,CAAKhC,QAASjB,KAAKiB,QAASf,KAAM8C,EAA+BC,KAAK,UAE7E,K,GA3DgBnC,IAAMC,WA+DrBmC,E,4MACFC,YAAc,CAAC,OAAQ,QAAS,WAAY,QAAS,QAAS,c,2DAE9D,SAAsBC,GAClB,OAAOA,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,MAAM,EACxD,G,6BAED,WACI,IADc,EACRzD,EAAO,GADC,cAEOE,KAAKmD,aAFZ,IAEd,2BAAuC,CAAC,IAA7BK,EAA4B,QAC/BpD,EAAc,GACdoD,IAAWxD,KAAKC,MAAMwD,UACtBrD,EAAc,SACXsD,MAAM1D,KAAKC,MAAMC,KAAK,GAAhB,MAA4B,GAAGsD,IACpCpD,GAAeJ,KAAKC,MAAM0D,UAAY,uBAAyB,wBAG/DvD,GAAeJ,KAAKC,MAAM0D,UAAY,6BAA+B,+BAI7E7D,EAAKQ,KAAK,oBAAmBC,UAAU,cAA7B,SACN,wBAAQC,QAASR,KAAKC,MAAMO,QACpBD,UAAWH,EADnB,SACiCJ,KAAK4D,sBAAsBJ,MAF7C/C,eAItB,CAlBa,+BAmBd,OACI,cAAC,IAAMG,SAAP,UACI,6BACKd,GADIW,gBADQA,cAM5B,G,uBAED,SAAUe,GACN,OACI,cAAC,IAAMZ,SAAP,UACI,+BACI,6BAAmB,4BAAIY,EAAI,QAAlBf,eACT,6BAAmB,4BAAIe,EAAI,SAAlBf,eACT,6BAAmB,4BAAIe,EAAI,YAAlBf,eACT,6BAAmB,8BAAIe,EAAI,MAAR,UAAVf,eACT,6BAAmB,8BAAIe,EAAI,MAAR,UAAVf,eACT,6BAAmB,4BAAIe,EAAI,WAAiB,SAAM,YAAzCf,iBANJA,gBADQA,cAW5B,G,wBAED,SAAWiB,EAAGC,GACVD,EAAIA,EAAE1B,KAAKC,MAAMwD,SACjB9B,EAAIA,EAAE3B,KAAKC,MAAMwD,SACjB,IAAMI,EAAO7D,KAAKC,MAAM0D,UAAY,GAAK,EAezC,OAbID,MAAMhC,GACFgC,MAAM/B,GACED,EAAEoC,cAAcnC,GAEhB,EAGR+B,MAAM/B,IACG,EAEDF,WAAWC,GAAKD,WAAWE,IAG3BkC,CACnB,G,wBAED,WAAc,IAAD,OACH/D,EAAO,GACbA,EAAKQ,KAAKN,KAAK+D,mBACf,IAAK,IAAIhE,EAAI,EAAGA,EAAIC,KAAKC,MAAMC,KAAKC,OAAQJ,IACxC,GAAIC,KAAKC,MAAMC,KAAKH,GAAhB,OAA+BC,KAAKC,MAAMI,OAAQ,CAClD,IAAIgB,EAAQrB,KAAKC,MAAMC,KAAKH,GAAhB,MACZsB,EAAQA,EAAMW,MAAK,SAACN,EAAGC,GAAJ,OAAU,EAAKqC,WAAWtC,EAAGC,EAA7B,IACnB,IAAK,IAAIsC,EAAY,EAAGA,EAAY5C,EAAMlB,OAAQ8D,IAC9CnE,EAAKQ,KAAKN,KAAKkE,UAAU7C,EAAM4C,GAAYA,GAElD,CAEL,OAAOnE,CACV,G,oBAED,WACI,OACI,cAAC,IAAMc,SAAP,UACI,gCACI,gCACCZ,KAAKmE,kBAIrB,K,GA/FerD,IAAMC,WAoGpBqD,E,kDACF,WAAYnE,GAAQ,IAAD,8BACf,cAAMA,IACDoE,MAAQ,CACTnE,KAAM,CAAC,EACPG,OAAQ,GACRoD,QAAS,OACTE,WAAW,GANA,CAQlB,C,2CAED,WAAW,IAAD,OACNW,MACI,8CACCC,MAAK,SAACC,GAAD,OAASA,EAAIC,MAAb,IACLF,MAAK,SAACrE,GACH,EAAKwE,SAAS,CACVxE,KAAMA,EACNG,OAAQH,EAAK,GAAL,MAEf,GACR,G,+BAED,WACIF,KAAK2E,SACR,G,uBAED,SAAUC,GACN,IAAMC,EAAOD,EAAOE,OAAOC,UAAUC,cACjCH,IAAS7E,KAAKqE,MAAMZ,QACpBzD,KAAK0E,SAAS,CAACf,WAAY3D,KAAKqE,MAAMV,YAEtC3D,KAAK0E,SAAS,CACVjB,QAASoB,EACTlB,WAAW,GAGtB,G,oBAED,WAAU,IAAD,OACL,OAA4C,IAAxCsB,OAAOC,KAAKlF,KAAKqE,MAAMnE,MAAMC,OACtB,uEAGP,eAAC,IAAMS,SAAP,WACI,cAACf,EAAD,CAAKK,KAAMF,KAAKqE,MAAMnE,KAAMG,OAAQL,KAAKqE,MAAMhE,OAC1CG,QAAS,SAAAoE,GAAM,OAAI,EAAKF,SAAS,CAACrE,OAAQuE,EAAOE,OAAOC,WAAzC,EAAsDrE,YAAa,kBAAM,EAAKiE,SAAX,IACvF,iCACI,iCAAS3E,KAAKqE,MAAMhE,SACpB,yBAASQ,GAAG,SAAZ,SACI,cAACG,EAAD,CAAQd,KAAMF,KAAKqE,MAAMnE,SAE7B,yBAASW,GAAG,QAAZ,SACI,cAACqC,EAAD,CAAOhD,KAAMF,KAAKqE,MAAMnE,KAAMG,OAAQL,KAAKqE,MAAMhE,OAC1CoD,QAASzD,KAAKqE,MAAMZ,QAASE,UAAW3D,KAAKqE,MAAMV,UACnDnD,QAAS,SAACoE,GACN,EAAKO,UAAUP,EAClB,WAK3B,K,GA9DsB9D,IAAMC,WAiEpBqE,IAASC,WAAWC,SAASC,eAAe,SACpDC,OAAO,cAACpB,EAAD,I","file":"static/js/main.0ca75ecc.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n} from 'chart.js';\r\nimport {Bar} from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n);\r\n\r\n\r\nclass Nav extends React.Component {\r\n    renderCharacters() {\r\n        const rows = []\r\n        for (let i = 0; i < this.props.data.length; i++) {\r\n            let buttonClass = (this.props.data[i][\"name\"] === this.props.active) ? \"active\" : \"\";\r\n            rows.push(<li key={uuidv4()}>\r\n                <button className={buttonClass} onClick={this.props.onClick}>{this.props.data[i][\"name\"]}</button>\r\n            </li>);\r\n        }\r\n        rows.push(<li key={uuidv4()}><button onClick={this.props.refreshData}>Refresh Data</button></li>)\r\n        return rows\r\n    }\r\n\r\n    render() {\r\n        const rows = this.renderCharacters()\r\n        return (\r\n            <React.Fragment>\r\n                <nav>\r\n                    <div id=\"sticky_nav\">\r\n                        <header>Wealth</header>\r\n                         <header>Manager</header>\r\n                        <ul>\r\n                            {rows}\r\n\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nclass Graphs extends React.Component {\r\n    options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false\r\n    }\r\n    // TODO: CHANGE COLOURS UPON CONVERTING TO FOUNDRY 10\r\n    characterColours = ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)',\r\n        'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)',\r\n        'rgba(153, 102, 255, 0.2)', 'rgba(199, 160, 190, 0.2)']\r\n\r\n    wealth(items) {\r\n        return items.reduce((total, item) => total + parseFloat(item[\"total\"]), 0)\r\n    }\r\n\r\n    wealthWithoutConsumables(items) {\r\n        let consumableOrZero = n => n[\"consumable\"] ? 0 : parseFloat(n[\"total\"])\r\n        return items.reduce((a, b) => a + consumableOrZero(b), 0)\r\n    }\r\n\r\n    getGraphData(data, valueFunction) {\r\n        const graphList = [];\r\n        const graphData = {};\r\n        for (let i = 0; i < data.length; i++) {\r\n            graphList.push([data[i][\"name\"], valueFunction(data[i][\"items\"]), this.characterColours[i]])\r\n        }\r\n        graphList.sort((a, b) => b[1] - a[1])\r\n        graphData[\"labels\"] = []\r\n        graphData[\"data\"] = []\r\n        graphData[\"backgroundColor\"] = []\r\n        for (const element of graphList) {\r\n            graphData[\"labels\"].push(element[0])\r\n            graphData[\"data\"].push(element[1])\r\n            graphData[\"backgroundColor\"].push(element[2])\r\n        }\r\n        return graphData\r\n    }\r\n\r\n    graph(graphData, label) {\r\n        return {\r\n            labels: graphData[\"labels\"],\r\n            datasets: [{\r\n                label: label,\r\n                data: graphData[\"data\"],\r\n                backgroundColor: graphData[\"backgroundColor\"],\r\n                borderColor: graphData[\"backgroundColor\"].map((x) => x.replace(\"0.2\", \"1\")),\r\n                borderWidth: 1\r\n            }]\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const wealth = this.getGraphData(this.props.data, this.wealth)\r\n        const wealthGraph = this.graph(wealth, \"Wealth in GP\")\r\n        const wealthWithoutConsumables = this.getGraphData(this.props.data, this.wealthWithoutConsumables)\r\n        const wealthWithoutConsumablesGraph = this.graph(wealthWithoutConsumables, \"Wealth in GP without consumables\")\r\n        return <React.Fragment>\r\n            <Bar options={this.options} data={wealthGraph} type=\"bar\"/>\r\n            <Bar options={this.options} data={wealthWithoutConsumablesGraph} type=\"bar\"/>\r\n        </React.Fragment>\r\n    }\r\n}\r\n\r\n\r\nclass Table extends React.Component {\r\n    tableHeader = [\"name\", \"level\", \"quantity\", \"value\", \"total\", \"consumable\"]\r\n\r\n    capitalizeFirstLetter(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n\r\n    renderHeaderRow() {\r\n        const rows = []\r\n        for (const header of this.tableHeader) {\r\n            let buttonClass = \"\";\r\n            if (header === this.props.sorting) {\r\n                buttonClass = \"active\"\r\n                if(isNaN(this.props.data[0][\"items\"][0][header])) {\r\n                    buttonClass += this.props.ascending ? \" headerSortAscending\" : \" headerSortDescending\"\r\n                }\r\n                else {\r\n                    buttonClass += this.props.ascending ? \" headerSortAscendingNumber\" : \" headerSortDescendingNumber\"\r\n                }\r\n\r\n            }\r\n            rows.push(<th key={uuidv4()} className=\"tableHeader\">\r\n                <button onClick={this.props.onClick}\r\n                        className={buttonClass}>{this.capitalizeFirstLetter(header)}</button>\r\n            </th>)\r\n        }\r\n        return (\r\n            <React.Fragment key={uuidv4()}>\r\n                <tr key={uuidv4()}>\r\n                    {rows}\r\n                </tr>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    renderRow(item) {\r\n        return (\r\n            <React.Fragment key={uuidv4()}>\r\n                <tr key={uuidv4()}>\r\n                    <th key={uuidv4()}><p>{item[\"name\"]}</p></th>\r\n                    <th key={uuidv4()}><p>{item[\"level\"]}</p></th>\r\n                    <th key={uuidv4()}><p>{item[\"quantity\"]}</p></th>\r\n                    <th key={uuidv4()}><p>{item[\"value\"]} GP</p></th>\r\n                    <th key={uuidv4()}><p>{item[\"total\"]} GP</p></th>\r\n                    <th key={uuidv4()}><p>{item[\"consumable\"] ? \"✓\" : '✗'}</p></th>\r\n                </tr>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    compareFct(a, b) {\r\n        a = a[this.props.sorting]\r\n        b = b[this.props.sorting]\r\n        const flip = this.props.ascending ? 1 : -1\r\n        let value;\r\n        if (isNaN(a)) {\r\n            if (isNaN(b)) {\r\n                value = a.localeCompare(b);\r\n            } else {\r\n                value = 1;\r\n            }\r\n        } else {\r\n            if (isNaN(b)) {\r\n                value = -1;\r\n            } else {\r\n                value = parseFloat(a) - parseFloat(b);\r\n            }\r\n        }\r\n        return value * (flip)\r\n    }\r\n\r\n    renderRows() {\r\n        const rows = []\r\n        rows.push(this.renderHeaderRow())\r\n        for (let i = 0; i < this.props.data.length; i++) {\r\n            if (this.props.data[i][\"name\"] === this.props.active) {\r\n                let items = this.props.data[i][\"items\"]\r\n                items = items.sort((a, b) => this.compareFct(a, b))\r\n                for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\r\n                    rows.push(this.renderRow(items[itemIndex], itemIndex));\r\n                }\r\n            }\r\n        }\r\n        return rows\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <table>\r\n                    <tbody>\r\n                    {this.renderRows()}\r\n                    </tbody>\r\n                </table>\r\n            </React.Fragment>);\r\n    }\r\n\r\n}\r\n\r\n\r\nclass WealthViewer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: {},\r\n            active: \"\",\r\n            sorting: \"name\",\r\n            ascending: true\r\n        }\r\n    }\r\n\r\n    getData() {\r\n        fetch(\r\n            \"https://wealth-viewer.herokuapp.com/wealth\")\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                this.setState({\r\n                    data: data,\r\n                    active: data[0][\"name\"]\r\n                });\r\n            })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getData()\r\n    }\r\n\r\n    sortTable(button) {\r\n        const text = button.target.innerText.toLowerCase()\r\n        if (text === this.state.sorting) {\r\n            this.setState({ascending: !this.state.ascending})\r\n        } else {\r\n            this.setState({\r\n                sorting: text,\r\n                ascending: true\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (Object.keys(this.state.data).length === 0) {\r\n            return <h1> Data is Loading, please stand by... </h1>;\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <Nav data={this.state.data} active={this.state.active}\r\n                     onClick={button => this.setState({active: button.target.innerText})} refreshData={() => this.getData()}/>\r\n                <main>\r\n                    <header>{this.state.active}</header>\r\n                    <section id=\"charts\">\r\n                        <Graphs data={this.state.data}/>\r\n                    </section>\r\n                    <section id=\"table\">\r\n                        <Table data={this.state.data} active={this.state.active}\r\n                               sorting={this.state.sorting} ascending={this.state.ascending}\r\n                               onClick={(button) => {\r\n                                   this.sortTable(button)\r\n                               }}/>\r\n                    </section>\r\n                </main>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(<WealthViewer/>);\r\n"],"sourceRoot":""}