{"version":3,"sources":["index.js"],"names":["ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Nav","rows","i","this","props","data","length","buttonClass","active","push","className","onClick","uuidv4","renderCharacters","Fragment","id","React","Component","Graphs","options","responsive","maintainAspectRatio","characterColours","items","total","item","parseFloat","valueFunction","graphList","graphData","toFixed","sort","a","b","element","label","labels","datasets","backgroundColor","borderColor","map","x","replace","borderWidth","wealth","getGraphData","wealthGraph","graph","wealthWithoutConsumables","wealthWithoutConsumablesGraph","Table","tableHeader","string","charAt","toUpperCase","slice","header","sorting","isNaN","ascending","capitalizeFirstLetter","flip","localeCompare","renderHeaderRow","compareFct","itemIndex","renderRow","renderRows","WealthViewer","state","fetch","then","res","json","setState","button","text","target","innerText","toLowerCase","Object","keys","sortTable","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.3d38f4bf.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n} from 'chart.js';\r\nimport {Bar} from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n);\r\n\r\n\r\nclass Nav extends React.Component {\r\n    renderCharacters() {\r\n        const rows = []\r\n        for (let i = 0; i < this.props.data.length; i++) {\r\n            let buttonClass = (this.props.data[i][\"name\"] === this.props.active) ? \"active\" : \"\";\r\n            rows.push(<li key={uuidv4()}>\r\n                <button className={buttonClass} onClick={this.props.onClick}>{this.props.data[i][\"name\"]}</button>\r\n            </li>);\r\n        }\r\n        return rows\r\n    }\r\n\r\n    render() {\r\n        const rows = this.renderCharacters()\r\n        return (\r\n            <React.Fragment>\r\n                <nav>\r\n                    <div id=\"sticky_nav\">\r\n                        <header>Wealth Manager</header>\r\n                        <ul>\r\n                            {rows}\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nclass Graphs extends React.Component {\r\n    options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false\r\n    }\r\n    characterColours = ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)',\r\n        'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)',\r\n        'rgba(153, 102, 255, 0.2)', 'rgba(199, 160, 190, 0.2)']\r\n\r\n    wealth(items) {\r\n        let total = 0;\r\n        for (const item of items) {\r\n            total += parseFloat(item[\"total\"])\r\n        }\r\n        return total\r\n    }\r\n\r\n    wealthWithoutConsumables(items) {\r\n        let total = 0;\r\n        for (const item of items) {\r\n            if (!item[\"consumable\"]) {\r\n                total += parseFloat(item[\"total\"])\r\n            }\r\n        }\r\n        return total\r\n    }\r\n\r\n    getGraphData(data, valueFunction) {\r\n        const graphList = [];\r\n        const graphData = {};\r\n        for (let i = 0; i < data.length; i++) {\r\n            graphList.push([data[i][\"name\"], valueFunction(data[i][\"items\"]).toFixed(2), this.characterColours[i]])\r\n        }\r\n        graphList.sort((a, b) => b[1] - a[1])\r\n        graphData[\"labels\"] = []\r\n        graphData[\"data\"] = []\r\n        graphData[\"backgroundColor\"] = []\r\n        for (const element of graphList) {\r\n            graphData[\"labels\"].push(element[0])\r\n            graphData[\"data\"].push(element[1])\r\n            graphData[\"backgroundColor\"].push(element[2])\r\n        }\r\n        return graphData\r\n    }\r\n\r\n    graph(graphData, label) {\r\n        return {\r\n            labels: graphData[\"labels\"],\r\n            datasets: [{\r\n                label: label,\r\n                data: graphData[\"data\"],\r\n                backgroundColor: graphData[\"backgroundColor\"],\r\n                borderColor: graphData[\"backgroundColor\"].map((x) => x.replace(\"0.2\", \"1\")),\r\n                borderWidth: 1\r\n            }]\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const wealth = this.getGraphData(this.props.data, this.wealth)\r\n        const wealthGraph = this.graph(wealth, \"Wealth in GP\")\r\n        const wealthWithoutConsumables = this.getGraphData(this.props.data, this.wealthWithoutConsumables)\r\n        const wealthWithoutConsumablesGraph = this.graph(wealthWithoutConsumables, \"Wealth in GP without consumables\")\r\n        return <React.Fragment>\r\n            <Bar options={this.options} data={wealthGraph}/>\r\n            <Bar options={this.options} data={wealthWithoutConsumablesGraph}/>\r\n        </React.Fragment>\r\n    }\r\n}\r\n\r\n\r\nclass Table extends React.Component {\r\n    tableHeader = [\"name\", \"level\", \"quantity\", \"value\", \"total\", \"consumable\"]\r\n\r\n    capitalizeFirstLetter(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n\r\n    renderHeaderRow() {\r\n        const rows = []\r\n        for (const header of this.tableHeader) {\r\n            let buttonClass = \"\";\r\n            if (header === this.props.sorting) {\r\n                buttonClass = \"active\"\r\n                if(isNaN(this.props.data[0][\"items\"][0][header])) {\r\n                    buttonClass += this.props.ascending ? \" headerSortAscending\" : \" headerSortDescending\"\r\n                }\r\n                else {\r\n                    buttonClass += this.props.ascending ? \" headerSortAscendingNumber\" : \" headerSortDescendingNumber\"\r\n                }\r\n\r\n            }\r\n            rows.push(<th key={uuidv4()} className=\"tableHeader\">\r\n                <button onClick={this.props.onClick}\r\n                        className={buttonClass}>{this.capitalizeFirstLetter(header)}</button>\r\n            </th>)\r\n        }\r\n        return (\r\n            <React.Fragment key={uuidv4()}>\r\n                <tr key={uuidv4()}>\r\n                    {rows}\r\n                </tr>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    renderRow(item) {\r\n        return (\r\n            <React.Fragment key={uuidv4()}>\r\n                <tr key={uuidv4()}>\r\n                    <th key={uuidv4()}><p>{item[\"name\"]}</p></th>\r\n                    <th key={uuidv4()}><p>{item[\"level\"]}</p></th>\r\n                    <th key={uuidv4()}><p>{item[\"quantity\"]}</p></th>\r\n                    <th key={uuidv4()}><p>{item[\"value\"]} GP</p></th>\r\n                    <th key={uuidv4()}><p>{item[\"total\"]} GP</p></th>\r\n                    <th key={uuidv4()}><p>{item[\"consumable\"] ? \"✓\" : '✗'}</p></th>\r\n                </tr>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    compareFct(a, b) {\r\n        a = a[this.props.sorting]\r\n        b = b[this.props.sorting]\r\n        const flip = this.props.ascending ? 1 : -1\r\n        let value = 0;\r\n        if (isNaN(a)) {\r\n            if (isNaN(b)) {\r\n                value = a.localeCompare(b);\r\n            } else {\r\n                value = 1;\r\n            }\r\n        } else {\r\n            if (isNaN(b)) {\r\n                value = -1;\r\n            } else {\r\n                value = parseFloat(a) - parseFloat(b);\r\n            }\r\n        }\r\n        return value * (flip)\r\n    }\r\n\r\n    renderRows() {\r\n        const rows = []\r\n        rows.push(this.renderHeaderRow())\r\n        for (let i = 0; i < this.props.data.length; i++) {\r\n            if (this.props.data[i][\"name\"] === this.props.active) {\r\n                let items = this.props.data[i][\"items\"]\r\n                items = items.sort((a, b) => this.compareFct(a, b))\r\n                for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\r\n                    rows.push(this.renderRow(items[itemIndex], itemIndex));\r\n                }\r\n            }\r\n        }\r\n        return rows\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <table>\r\n                    <tbody>\r\n                    {this.renderRows()}\r\n                    </tbody>\r\n                </table>\r\n            </React.Fragment>);\r\n    }\r\n\r\n}\r\n\r\n\r\nclass WealthViewer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: {},\r\n            active: \"\",\r\n            sorting: \"name\",\r\n            ascending: true\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\r\n            \"https://wealth-viewer.herokuapp.com/wealth\")\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                this.setState({\r\n                    data: data,\r\n                    active: data[0][\"name\"]\r\n                });\r\n            })\r\n    }\r\n\r\n    sortTable(button) {\r\n        const text = button.target.innerText.toLowerCase()\r\n        if (text === this.state.sorting) {\r\n            this.setState({ascending: !this.state.ascending})\r\n        } else {\r\n            this.setState({\r\n                sorting: text,\r\n                ascending: true\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (Object.keys(this.state.data).length === 0) {\r\n            return <h1> Data is Loading, please stand by... </h1>;\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <Nav data={this.state.data} active={this.state.active}\r\n                     onClick={button => this.setState({active: button.target.innerText})}/>\r\n                <main>\r\n                    <header>{this.state.active}</header>\r\n                    <section id=\"charts\">\r\n                        <Graphs data={this.state.data}/>\r\n                    </section>\r\n                    <section id=\"table\">\r\n                        <Table data={this.state.data} active={this.state.active}\r\n                               sorting={this.state.sorting} ascending={this.state.ascending}\r\n                               onClick={(button) => {\r\n                                   this.sortTable(button)\r\n                               }}/>\r\n                    </section>\r\n                </main>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(<WealthViewer/>);\r\n"],"sourceRoot":""}