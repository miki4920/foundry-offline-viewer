{"version":3,"sources":["index.js"],"names":["ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","md5","require","Nav","characterButtons","i","this","props","data","length","buttonClass","active","push","className","onClick","uuidv4","refreshData","changeTheme","id","renderCharacters","React","Component","Graphs","options","responsive","graphClickEvent","updateActive","event","points","getElementsAtEventForMode","intersect","firstPoint","label","labels","index","items","reduce","total","item","parseFloat","a","b","n","slice","valueFunction","graphList","graphData","borderColor","hashColor","backgroundColor","sort","element","console","log","datasets","borderWidth","wealth","getGraphData","wealthGraph","graph","wealthWithoutConsumables","wealthWithoutConsumablesGraph","Fragment","type","Table","tableHeader","string","charAt","toUpperCase","rows","header","sorting","isNaN","ascending","capitalizeFirstLetter","flip","localeCompare","renderHeaderRow","compareFct","itemIndex","renderRow","renderRows","WealthViewer","state","theme","fetch","then","res","json","setState","getData","document","documentElement","setAttribute","button","text","target","innerText","toLowerCase","prevState","Object","keys","toggleTheme","sortTable","ReactDOM","createRoot","getElementById","render"],"mappings":"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","file":"static/js/main.bbf06e03.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\n\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n} from 'chart.js';\r\nimport {Bar} from 'react-chartjs-2';\r\n\r\nimport './index.css';\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n);\r\n\r\nconst md5 = require('md5')\r\n\r\n\r\nclass Nav extends React.Component {\r\n     renderCharacters() {\r\n        const characterButtons = []\r\n        for (let i = 0; i < this.props.data.length; i++) {\r\n            let buttonClass = (this.props.data[i][\"name\"] === this.props.active) ? \"active\" : \"\";\r\n            characterButtons.push(\r\n                <button\r\n                    key={uuidv4()}\r\n                    className={buttonClass}\r\n                    onClick={this.props.onClick}\r\n                >\r\n                    {this.props.data[i][\"name\"]}\r\n                </button>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {characterButtons}\r\n                <div className=\"bottom_bar\">\r\n                    <button key={uuidv4()} onClick={this.props.refreshData}>\r\n                        Refresh\r\n                    </button>\r\n                    <button key={uuidv4()} onClick={this.props.changeTheme}>\r\n                        Theme\r\n                    </button>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav>\r\n                <div id=\"sticky_nav\">\r\n                    <header>Wealth Manager</header>\r\n                    {this.renderCharacters()}\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nclass Graphs extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.options = {\r\n            responsive: true,\r\n            onClick: this.graphClickEvent(this.props.updateActive)\r\n        }\r\n    }\r\n\r\n    graphClickEvent(updateActive) {\r\n        return function onClick(event) {\r\n            const points = event[\"chart\"].getElementsAtEventForMode(event, 'nearest', {intersect: true}, true)\r\n            if (points.length) {\r\n                const firstPoint = points[0]\r\n                const label = event[\"chart\"].data.labels[firstPoint.index];\r\n                updateActive(label)\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    wealth(items) {\r\n        return items.reduce((total, item) => total + parseFloat(item[\"total\"]), 0)\r\n    }\r\n\r\n    wealthWithoutConsumables(items) {\r\n        let consumableOrZero = n => n[\"consumable\"] ? 0 : parseFloat(n[\"total\"])\r\n        return items.reduce((a, b) => a + consumableOrZero(b), 0)\r\n    }\r\n\r\n    hashColor(label) {\r\n        return '#' + md5(label).slice(10, 16);\r\n    }\r\n\r\n    getGraphData(data, valueFunction) {\r\n        const graphList = [];\r\n        const graphData = {};\r\n        for (let i = 0; i < data.length; i++) {\r\n            let borderColor = this.hashColor(data[i][\"name\"])\r\n            let backgroundColor = borderColor + \"40\"\r\n            graphList.push([data[i][\"name\"], valueFunction(data[i][\"items\"]), borderColor, backgroundColor])\r\n        }\r\n        graphList.sort((a, b) => b[1] - a[1])\r\n        graphData[\"labels\"] = []\r\n        graphData[\"data\"] = []\r\n        graphData[\"borderColor\"] = []\r\n        graphData[\"backgroundColor\"] = []\r\n        for (const element of graphList) {\r\n            graphData[\"labels\"].push(element[0])\r\n            graphData[\"data\"].push(element[1])\r\n            graphData[\"borderColor\"].push(element[2])\r\n            graphData[\"backgroundColor\"].push(element[3])\r\n        }\r\n        return graphData\r\n    }\r\n\r\n\r\n    graph(graphData, label) {\r\n        console.log(graphData[\"borderColor\"] + \"33\")\r\n        return {\r\n            labels: graphData[\"labels\"],\r\n            datasets: [{\r\n                label: label,\r\n                data: graphData[\"data\"],\r\n                backgroundColor: graphData[\"backgroundColor\"],\r\n                borderColor: graphData[\"borderColor\"],\r\n                borderWidth: 1\r\n            }]\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const wealth = this.getGraphData(this.props.data, this.wealth)\r\n        const wealthGraph = this.graph(wealth, \"Wealth in GP\")\r\n        const wealthWithoutConsumables = this.getGraphData(this.props.data, this.wealthWithoutConsumables)\r\n        const wealthWithoutConsumablesGraph = this.graph(wealthWithoutConsumables, \"Wealth in GP without consumables\")\r\n        return <React.Fragment>\r\n            <div className=\"chart\">\r\n                <Bar options={this.options} data={wealthGraph} type=\"bar\"/>\r\n            </div>\r\n            <div className=\"chart\">\r\n                <Bar options={this.options} data={wealthWithoutConsumablesGraph} type=\"bar\"/>\r\n            </div>\r\n        </React.Fragment>\r\n    }\r\n}\r\n\r\n\r\nclass Table extends React.Component {\r\n    tableHeader = [\"name\", \"level\", \"quantity\", \"value\", \"total\", \"consumable\"]\r\n\r\n    capitalizeFirstLetter(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n\r\n    renderHeaderRow() {\r\n        const rows = []\r\n        for (const header of this.tableHeader) {\r\n            let buttonClass = \"\";\r\n            if (header === this.props.sorting) {\r\n                buttonClass = \"active\"\r\n                if (isNaN(this.props.data[0][\"items\"][0][header])) {\r\n                    buttonClass += this.props.ascending ? \" headerSortAscending\" : \" headerSortDescending\"\r\n                } else {\r\n                    buttonClass += this.props.ascending ? \" headerSortAscendingNumber\" : \" headerSortDescendingNumber\"\r\n                }\r\n\r\n            }\r\n            rows.push(<th key={uuidv4()} className=\"tableHeader\">\r\n                <button onClick={this.props.onClick}\r\n                        className={buttonClass}>{this.capitalizeFirstLetter(header)}</button>\r\n            </th>)\r\n        }\r\n        return (\r\n            <React.Fragment key={uuidv4()}>\r\n                <tr key={uuidv4()}>\r\n                    {rows}\r\n                </tr>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    renderRow(item) {\r\n        return (\r\n            <React.Fragment key={uuidv4()}>\r\n                <tr key={uuidv4()}>\r\n                    <th key={uuidv4()}><p>{item[\"name\"]}</p></th>\r\n                    <th key={uuidv4()}><p>{item[\"level\"]}</p></th>\r\n                    <th key={uuidv4()}><p>{item[\"quantity\"]}</p></th>\r\n                    <th key={uuidv4()}><p>{item[\"value\"]} GP</p></th>\r\n                    <th key={uuidv4()}><p>{item[\"total\"]} GP</p></th>\r\n                    <th key={uuidv4()}><p>{item[\"consumable\"] ? \"✓\" : '✗'}</p></th>\r\n                </tr>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    compareFct(a, b) {\r\n        a = a[this.props.sorting]\r\n        b = b[this.props.sorting]\r\n        const flip = this.props.ascending ? 1 : -1\r\n        let value;\r\n        if (isNaN(a)) {\r\n            if (isNaN(b)) {\r\n                value = a.localeCompare(b);\r\n            } else {\r\n                value = 1;\r\n            }\r\n        } else {\r\n            if (isNaN(b)) {\r\n                value = -1;\r\n            } else {\r\n                value = parseFloat(a) - parseFloat(b);\r\n            }\r\n        }\r\n        return value * (flip)\r\n    }\r\n\r\n    renderRows() {\r\n        const rows = []\r\n        rows.push(this.renderHeaderRow())\r\n        for (let i = 0; i < this.props.data.length; i++) {\r\n            if (this.props.data[i][\"name\"] === this.props.active) {\r\n                let items = this.props.data[i][\"items\"]\r\n                items = items.sort((a, b) => this.compareFct(a, b))\r\n                for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\r\n                    rows.push(this.renderRow(items[itemIndex], itemIndex));\r\n                }\r\n            }\r\n        }\r\n        return rows\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <table>\r\n                    <tbody>\r\n                    {this.renderRows()}\r\n                    </tbody>\r\n                </table>\r\n            </React.Fragment>);\r\n    }\r\n\r\n}\r\n\r\n\r\nclass WealthViewer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: {},\r\n            active: \"\",\r\n            sorting: \"name\",\r\n            ascending: true,\r\n            theme: \"dark\"\r\n        }\r\n    }\r\n\r\n    getData() {\r\n        fetch(\r\n            \"/wealth\")\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                this.setState({\r\n                    data: data,\r\n                    active: data[0][\"name\"]\r\n                });\r\n            })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getData()\r\n        document.documentElement.setAttribute('data-theme', this.state.theme);\r\n    }\r\n\r\n    sortTable(button) {\r\n        const text = button.target.innerText.toLowerCase()\r\n        if (text === this.state.sorting) {\r\n            this.setState({ascending: !this.state.ascending})\r\n        } else {\r\n            this.setState({\r\n                sorting: text,\r\n                ascending: true\r\n            })\r\n        }\r\n    }\r\n\r\n    toggleTheme() {\r\n    this.setState(prevState => ({\r\n        theme: prevState.theme === \"light\" ? \"dark\" : \"light\"\r\n    }), () => {\r\n        document.documentElement.setAttribute('data-theme', this.state.theme);\r\n    });\r\n}\r\n\r\n    render() {\r\n        if (Object.keys(this.state.data).length === 0) {\r\n            return <h1> Data is Loading, please stand by... </h1>;\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <Nav data={this.state.data} active={this.state.active}\r\n                     onClick={button => this.setState({active: button.target.innerText})}\r\n                     refreshData={() => this.getData()}\r\n                     changeTheme={() => {this.toggleTheme()}}/>\r\n                <main>\r\n                    <header id=\"title\">{this.state.active}</header>\r\n                    <div id=\"charts\">\r\n                        <Graphs data={this.state.data} updateActive={(label) => this.setState({active: label})}/>\r\n                    </div>\r\n                    <section id=\"table\">\r\n                        <Table data={this.state.data} active={this.state.active}\r\n                               sorting={this.state.sorting} ascending={this.state.ascending}\r\n                               onClick={(button) => {\r\n                                   this.sortTable(button)\r\n                               }}\r\n                                />\r\n                    </section>\r\n                </main>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(<WealthViewer/>);\r\n"],"sourceRoot":""}